"pink", "#28A3FF", "grey75", "#E7851E", "#0CB702", "#FF61C7", "#D277FF", "blue"))
# PS24EI8 ALPHA CHAIN
vis(tracking.tra) + scale_fill_manual(values = c("#F8766D", "#9C8DFF", "grey40", "grey60", "#B2A100", "#7CAE00", "#F166E8", "grey70",
"pink", "#28A3FF", "grey75", "#E7851E", "#0CB702", "#FF61C7", "#D277FF", "grey80"))
library(scales)
length(tracking.trb)
length(tracking.trb$CDR3.aa)
colors.trb <- show_col(hue_pal()(length(tracking.trb$CDR3.aa)))
colors.trb <- hue_pal()(length(tracking.trb$CDR3.aa))
colors.trb
colors.tra <- hue_pal()(length(tracking.tra$CDR3.aa))
colors.trb
colors.trb[length(colors.trb)]
# Plotting using the vis() function.
colors.trb <- hue_pal()(length(tracking.trb$CDR3.aa))
colors.trb[length(colors.trb)] <- "grey80"
colors.tra <- hue_pal()(length(tracking.tra$CDR3.aa))
colors.tra[length(colors.tra)] <- "grey80"
# Plotting using the vis() function.
vis(tracking.trb) + scale_fill_manual(values = colors.trb)
vis(tracking.tra) + scale_fill_manual(values = colors.tra)
# PS24FL8 BETA
vis(tracking.trb) + scale_fill_manual(values = c("#E68613", "#CD9600", "#0CB702", "lightskyblue", "#A08CFF", "#C77CFF", "#FF61CC", "grey80"))
# Select groups to plot (e.g. "PS24FL8EARLY", "PS24FL8INT" ,"PS24FL8LATE").
groups.to.plot <- c("PS24FL8EARLY", "PS24FL8INT" ,"PS24FL8LATE")
# Filter data to retain only the groups of interest.
beta.filter <- tcr.seq.beta$data[names(tcr.seq.beta$data) %in% groups.to.plot]
alph.filter <- tcr.seq.alph$data[names(tcr.seq.alph$data) %in% groups.to.plot]
# Merged onecell clones
beta.filter <- merge.onecell.clones(beta.filter)
alph.filter <- merge.onecell.clones(alph.filter)
# Extract all unique clonotypes from the specified groups for comprehensive plotting.
unique.cdr3.beta <- unique(unlist(lapply(beta.filter, function(df) df$CDR3.aa)))
unique.cdr3.alph <- unique(unlist(lapply(alph.filter, function(df) df$CDR3.aa)))
# Track clonotypes for plotting based on the previously defined set of unique clones.
tracking.trb <- trackClonotypes(beta.filter, .which = unique.cdr3.beta, .col = "aa")
tracking.tra <- trackClonotypes(alph.filter, .which = unique.cdr3.alph, .col = "aa")
# PS24FL8 BETA
vis(tracking.trb) + scale_fill_manual(values = c("#E68613", "#CD9600", "#0CB702", "lightskyblue", "#A08CFF", "#C77CFF", "#FF61CC", "grey80"))
# PS24FL8 ALPHA
vis(tracking.tra)+ scale_fill_manual(values = c("#F8766D", "lightskyblue", "#E68613", "#A08CFF", "#C77CFF", "#FF61CC", "grey80"))
groups.to.plot == c("PS24FL8EARLY", "PS24FL8INT" ,"PS24FL8LATE")
# PS24FL8 BETA
vis(tracking.trb) + scale_fill_manual(values = c("#E68613", "#CD9600", "#0CB702", "lightskyblue", "#A08CFF", "#C77CFF", "#FF61CC", "grey80"))
tracking.trb$CDR3.aa
tracking.tra$CDR3.aa
vis(tracking.tra) + scale_fill_manual(values = colors.tra)
# Select groups to plot (e.g. "PS24FL8EARLY", "PS24FL8INT" ,"PS24FL8LATE").
groups.to.plot <- c("PS24FL8EARLY", "PS24FL8INT" ,"PS24FL8LATE")
# Filter data to retain only the groups of interest.
beta.filter <- tcr.seq.beta$data[names(tcr.seq.beta$data) %in% groups.to.plot]
alph.filter <- tcr.seq.alph$data[names(tcr.seq.alph$data) %in% groups.to.plot]
# Merged onecell clones
beta.filter <- merge.onecell.clones(beta.filter)
alph.filter <- merge.onecell.clones(alph.filter)
# Extract all unique clonotypes from the specified groups for comprehensive plotting.
unique.cdr3.beta <- unique(unlist(lapply(beta.filter, function(df) df$CDR3.aa)))
unique.cdr3.alph <- unique(unlist(lapply(alph.filter, function(df) df$CDR3.aa)))
# Track clonotypes for plotting based on the previously defined set of unique clones.
tracking.trb <- trackClonotypes(beta.filter, .which = unique.cdr3.beta, .col = "aa")
tracking.tra <- trackClonotypes(alph.filter, .which = unique.cdr3.alph, .col = "aa")
# Set up colors for the plot with MergedClones in grey.
colors.trb <- hue_pal()(length(tracking.trb$CDR3.aa))
colors.trb[length(colors.trb)] <- "grey80"
colors.tra <- hue_pal()(length(tracking.tra$CDR3.aa))
colors.tra[length(colors.tra)] <- "grey80"
# Plotting using the vis() function.
vis(tracking.trb) + scale_fill_manual(values = colors.trb)
vis(tracking.tra) + scale_fill_manual(values = colors.tra)
# PS24FL8 ALPHA
vis(tracking.tra)+ scale_fill_manual(values = c("#F8766D", "lightskyblue", "#E68613", "#A08CFF", "#C77CFF", "#FF61CC", "grey80"))
elect groups to plot (e.g. "PS24FL8EARLY", "PS24FL8INT" ,"PS24FL8LATE").
# Select groups to plot (e.g. "PS24FL8EARLY", "PS24FL8INT" ,"PS24FL8LATE").
groups.to.plot <- c("PS24EI8EARLY", "PS24EI8INT" ,"PS24EI8LATE")
# Filter data to retain only the groups of interest.
beta.filter <- tcr.seq.beta$data[names(tcr.seq.beta$data) %in% groups.to.plot]
alph.filter <- tcr.seq.alph$data[names(tcr.seq.alph$data) %in% groups.to.plot]
# Merged onecell clones
beta.filter <- merge.onecell.clones(beta.filter)
alph.filter <- merge.onecell.clones(alph.filter)
# Extract all unique clonotypes from the specified groups for comprehensive plotting.
unique.cdr3.beta <- unique(unlist(lapply(beta.filter, function(df) df$CDR3.aa)))
unique.cdr3.alph <- unique(unlist(lapply(alph.filter, function(df) df$CDR3.aa)))
# Track clonotypes for plotting based on the previously defined set of unique clones.
tracking.trb <- trackClonotypes(beta.filter, .which = unique.cdr3.beta, .col = "aa")
tracking.tra <- trackClonotypes(alph.filter, .which = unique.cdr3.alph, .col = "aa")
# PS24EI8 BETA CHAIN
vis(tracking.trb) + scale_fill_manual(values = c("#F8766D", "#E7851E", "grey60", "grey40", "#B2A100", "grey", "#0CB702", "#7CAE00", "#00BC51",
"#28A3FF", "#9C8DFF", "#D277FF", "#F166E8", "#FF61C7", "grey50", "grey60", "grey80"))
tracking.trb$CDR3.aa
# PS24EI8 BETA CHAIN
vis(tracking.trb) + scale_fill_manual(values = c("#F8766D", "#E7851E", "grey60", "grey40", "#B2A100", "grey", "#0CB702", "#7CAE00", "#00BC51",
"#28A3FF", "#9C8DFF", "#D277FF", "#F166E8", "#FF61C7", "grey50", "grey60", "grey80"))
tracking.tra$CDR3.aa
vis(tracking.tra) + scale_fill_manual(values = c("#F8766D", "#E7851E", "grey60", "grey40", "#B2A100", "grey", "#0CB702", "#7CAE00", "#00BC51",
"#28A3FF", "#9C8DFF", "#D277FF", "#F166E8", "#FF61C7", "grey50", "grey60"))
vis(tracking.tra) + scale_fill_manual(values = c("#F8766D", "#E7851E", "grey60", "grey40", "#B2A100", "grey", "#0CB702", "#7CAE00", "#00BC51",
"#28A3FF", "#9C8DFF", "#D277FF", "#F166E8", "#FF61C7", "grey50", "grey60",))
vis(tracking.tra) + scale_fill_manual(values = c("#F8766D", "#E7851E", "grey60", "grey40", "#B2A100", "grey", "#0CB702", "#7CAE00", "#00BC51",
"#28A3FF", "#9C8DFF", "#D277FF", "#F166E8", "#FF61C7", "grey50", "grey60",))
# PS24EI8 ALPHA CHAIN
vis(tracking.tra) + scale_fill_manual(values = c("#F8766D", "#9C8DFF", "grey40", "grey60", "#B2A100", "#7CAE00", "#F166E8", "grey70",
"pink", "#28A3FF", "grey75", "#E7851E", "#0CB702", "#FF61C7", "#D277FF", "grey80"))
# PS24EI8 ALPHA CHAIN
vis(tracking.tra) + scale_fill_manual(values = c("#F8766D", "#9C8DFF", "grey40", "grey60", "#B2A100", "#7CAE00", "#F166E8", "grey70",
"lightskyblue", "#28A3FF", "grey75", "#E7851E", "#0CB702", "#FF61C7", "#D277FF", "grey80"))
tracking.tra$CDR3.aa
tracking.tra$CDR3.aa
# PS24EI8 ALPHA CHAIN
vis(tracking.tra) + scale_fill_manual(values = c("#", "#9C8DFF", "grey40", "grey60", "#B2A100", "#7CAE00", "#F166E8", "grey70",
"lightskyblue", "#28A3FF", "grey75", "#E7851E", "#0CB702", "#FF61C7", "#D277FF", "grey80"))
# PS24EI8 ALPHA CHAIN
vis(tracking.tra) + scale_fill_manual(values = c("#F8766D", "#9C8DFF", "grey40", "grey60", "#B2A100", "#7CAE00", "#F166E8", "grey70",
"lightskyblue", "#28A3FF", "grey75", "#E7851E", "#0CB702", "#FF61C7", "#D277FF", "grey80"))
# PS24EI8 ALPHA CHAIN
vis(tracking.tra) + scale_fill_manual(values = c("#F8766D", "#9C8DFF", "grey40", "grey60", "#B2A100", "#7CAE00", "#F166E8", "grey70",
"lightskyblue", "#28A3FF", "grey75", "#E7851E", "#0CB702", "#FF61C7", "#D277FF", "grey80"))
cdr3_colors <- c(
# For PS24FL8 beta chain.
"CASSEFGAAVYEQYF" = "#E68613",
"CASSLGGWTGYEQYF" = "#CD9600",
"CASSPIEGIVTEAFF" = "#0CB702",
"CASSPPTGSYEQYF" = "lightskyblue",
"CASSTGTGSAQETQYF" = "#A08CFF",
"CATSRGGGLTNTGELFF" = "#C77CFF",
"CSARDSVTGGGYSPLHF" = "#FF61CC",
# For PS24FL8 alpha chain.
"CAAKTSGTYKYIF" = "#F8766D",
"CAVDNFNKFYF" = "lightskyblue",
"CAVREAGGYQKVTF" = "#E68613",
"CAVRGSGTYKYIF" = "#A08CFF",
"CAVRRAGTYKYIF" = "#C77CFF",
"CVSYNTNAGKSTF" = "#FF61CC",
# For PS24EI8 beta chain.
"CASSAAVKGDTQYF" = "#F8766D",
"CASSEAATGRSTDTQYF" = "#E7851E",
"CASSELDGMRDTQYF" = "grey60",
"CASSETGGRGTEAFF" = "grey40",
"CASSFQGERTEAFF" = "#B2A100",
"CASSLEPPGYASDEQFF" = "grey",
"CASSLYPGGNEQYF" = "#0CB702",
"CASSPLPSLYGYTF" = "#7CAE00",
"CASSPPTGSYEQYF" = "#00BC51",
"CASSTGTSGRGEQFF" = "#28A3FF",
"CASSVVGDSRETQYF" = "#9C8DFF",
"CASTPQGARGDTEAFF" = "#D277FF",
"CSAREGGYEQYF" = "#F166E8",
"CSARLSYEQYF" = "#FF61C7",
"CSARQSYEQYF" = "grey50",
"CSARRDYEQYF" = "grey60",
# For PS24EI8 alpha chain.
"CAAPGGGGNKLTF" = "#F8766D",
"CAASMADKLIF" = "#9C8DFF",
"CAASNGYSTLTF" = "grey40",
"CAGPGGGGANNLFF" = "grey60",
"CAHGGGGSEKLVF" = "#B2A100",
"CAPGDGQKLLF" = "#7CAE00",
"CAPSDGQKLLF" = "#F166E8",
"CAPTRP_NQFYF" = "grey70",
"CAVDNFNKFYF" = "lightskyblue",
"CAVGYTDKLIF" = "#28A3FF",
"CAVRGGIW_SARQLTF" = "grey75",
"CAVSDHNDMRF" = "#E7851E",
"CAVSSGNTPLVF" = "#0CB702",
"CGTDSNTGNQFYF" = "#FF61C7",
"CVVEAGGTSYGKLTF" = "#D277FF",
# For all conditions.
"MergedClones" = "grey80")
vis(tracking.tra) + scale_fill_manual(values = cdr3_colors)
vis(tracking.trb) + scale_fill_manual(values = cdr3_colors)
# Select groups to plot (e.g. "PS24FL8EARLY", "PS24FL8INT" ,"PS24FL8LATE").
groups.to.plot <- c("PS03EARLY" ,"PS03LATE")
# Filter data to retain only the groups of interest.
beta.filter <- tcr.seq.beta$data[names(tcr.seq.beta$data) %in% groups.to.plot]
alph.filter <- tcr.seq.alph$data[names(tcr.seq.alph$data) %in% groups.to.plot]
# Merged onecell clones
beta.filter <- merge.onecell.clones(beta.filter)
alph.filter <- merge.onecell.clones(alph.filter)
# Extract all unique clonotypes from the specified groups for comprehensive plotting.
unique.cdr3.beta <- unique(unlist(lapply(beta.filter, function(df) df$CDR3.aa)))
unique.cdr3.alph <- unique(unlist(lapply(alph.filter, function(df) df$CDR3.aa)))
# Track clonotypes for plotting based on the previously defined set of unique clones.
tracking.trb <- trackClonotypes(beta.filter, .which = unique.cdr3.beta, .col = "aa")
tracking.tra <- trackClonotypes(alph.filter, .which = unique.cdr3.alph, .col = "aa")
vis(tracking.trb)
show_col(hue_pal()(3))
vis(tracking.trb)
vis(tracking.tra) + scale_fill_manual(values = c("#CD9600", "#00BC51", "grey80"))
vis(tracking.tra)
vis(tracking.trb) + scale_fill_manual(values = c("#CD9600", "#00BC51", "grey80"))
vis(tracking.tra)
vis(tracking.tra) + scale_fill_manual(values = c("#28A3FF", "#CD9600", "#00BC51", "grey80"))
vis(tracking.tra) + scale_fill_manual(values = c("indianred", "#CD9600", "#00BC51", "grey80"))
tracking.trb$CDR3.aa
tracking.tra$CDR3.aa
groups.to.plot
groups.to.plot
# Manually assign colors for each unique CDR3aa sequence.
cdr3_colors <- c(
# For PS24FL8 beta chain.
"CASSEFGAAVYEQYF" = "#E68613",
"CASSLGGWTGYEQYF" = "#CD9600",
"CASSPIEGIVTEAFF" = "#0CB702",
"CASSPPTGSYEQYF" = "lightskyblue",
"CASSTGTGSAQETQYF" = "#A08CFF",
"CATSRGGGLTNTGELFF" = "#C77CFF",
"CSARDSVTGGGYSPLHF" = "#FF61CC",
# For PS24FL8 alpha chain.
"CAAKTSGTYKYIF" = "#F8766D",
"CAVDNFNKFYF" = "lightskyblue",
"CAVREAGGYQKVTF" = "#E68613",
"CAVRGSGTYKYIF" = "#A08CFF",
"CAVRRAGTYKYIF" = "#C77CFF",
"CVSYNTNAGKSTF" = "#FF61CC",
# For PS24EI8 beta chain.
"CASSAAVKGDTQYF" = "#F8766D",
"CASSEAATGRSTDTQYF" = "#E7851E",
"CASSELDGMRDTQYF" = "grey60",
"CASSETGGRGTEAFF" = "grey40",
"CASSFQGERTEAFF" = "#B2A100",
"CASSLEPPGYASDEQFF" = "grey",
"CASSLYPGGNEQYF" = "#0CB702",
"CASSPLPSLYGYTF" = "#7CAE00",
"CASSPPTGSYEQYF" = "#00BC51",
"CASSTGTSGRGEQFF" = "#28A3FF",
"CASSVVGDSRETQYF" = "#9C8DFF",
"CASTPQGARGDTEAFF" = "#D277FF",
"CSAREGGYEQYF" = "#F166E8",
"CSARLSYEQYF" = "#FF61C7",
"CSARQSYEQYF" = "grey50",
"CSARRDYEQYF" = "grey60",
# For PS24EI8 alpha chain.
"CAAPGGGGNKLTF" = "#F8766D",
"CAASMADKLIF" = "#9C8DFF",
"CAASNGYSTLTF" = "grey40",
"CAGPGGGGANNLFF" = "grey60",
"CAHGGGGSEKLVF" = "#B2A100",
"CAPGDGQKLLF" = "#7CAE00",
"CAPSDGQKLLF" = "#F166E8",
"CAPTRP_NQFYF" = "grey70",
"CAVDNFNKFYF" = "lightskyblue",
"CAVGYTDKLIF" = "#28A3FF",
"CAVRGGIW_SARQLTF" = "grey75",
"CAVSDHNDMRF" = "#E7851E",
"CAVSSGNTPLVF" = "#0CB702",
"CGTDSNTGNQFYF" = "#FF61C7",
"CVVEAGGTSYGKLTF" = "#D277FF",
# For PS03EARLY beta chain.
"CASSLAGDLQPQHF" = "#CD9600",
"CASSLSSSNQPQHF" = "#00BC51",
# For PS)#LATE alpha chain.
"CALIPKTGAGSYQLTF" = "indianred",
"CAMRAGGTSYGKLTF" = "#CD9600",
"CAMRSPPGNMLTF" = "#00BC51",
# For all conditions.
"MergedClones" = "grey80")
# Select groups to plot (e.g. "PS24FL8EARLY", "PS24FL8INT" ,"PS24FL8LATE").
groups.to.plot <- c("PS14INT" ,"PS14LATE")
# Filter data to retain only the groups of interest.
beta.filter <- tcr.seq.beta$data[names(tcr.seq.beta$data) %in% groups.to.plot]
alph.filter <- tcr.seq.alph$data[names(tcr.seq.alph$data) %in% groups.to.plot]
# Merged onecell clones
beta.filter <- merge.onecell.clones(beta.filter)
alph.filter <- merge.onecell.clones(alph.filter)
# Extract all unique clonotypes from the specified groups for comprehensive plotting.
unique.cdr3.beta <- unique(unlist(lapply(beta.filter, function(df) df$CDR3.aa)))
unique.cdr3.alph <- unique(unlist(lapply(alph.filter, function(df) df$CDR3.aa)))
# Track clonotypes for plotting based on the previously defined set of unique clones.
tracking.trb <- trackClonotypes(beta.filter, .which = unique.cdr3.beta, .col = "aa")
tracking.tra <- trackClonotypes(alph.filter, .which = unique.cdr3.alph, .col = "aa")
# Set up colors for the plot with MergedClones in grey.
colors.trb <- hue_pal()(length(tracking.trb$CDR3.aa))
colors.trb[length(colors.trb)] <- "grey80"
colors.tra <- hue_pal()(length(tracking.tra$CDR3.aa))
colors.tra[length(colors.tra)] <- "grey80"
# Plotting using the vis() function.
vis(tracking.trb) + scale_fill_manual(values = colors.trb)
vis(tracking.tra) + scale_fill_manual(values = colors.tra)
vis(tracking.trb) + scale_fill_manual(values = cdr3_colors)
# Generate default colors for the rest
unique_cdr3 <- unique(tracking.trb$CDR3.aa)
default_colors <- hue_pal()(length(unique_cdr3))
# Create a named vector of default colors
default_colors_named <- setNames(default_colors, unique_cdr3)
# Overwrite default colors with specified colors where applicable
combined_colors <- default_colors_named
combined_colors[names(cdr3_colors)] <- cdr3_colors
vis(tracking.trb) + scale_fill_manual(values = combined_colors)
vis(tracking.trb) + scale_fill_manual(values = combined_colors) + theme(legend.position = "none")
# Plot.
vis(tracking.trb) + scale_fill_manual(values = combined_colors)
vis(tracking.tra) + scale_fill_manual(values = combined_colors)
# Select groups to plot (e.g. "PS24FL8EARLY", "PS24FL8INT" ,"PS24FL8LATE").
groups.to.plot <- c("PS24FL8EARLY", "PS24FL8INT" ,"PS24FL8LATE")
# Filter data to retain only the groups of interest.
beta.filter <- tcr.seq.beta$data[names(tcr.seq.beta$data) %in% groups.to.plot]
alph.filter <- tcr.seq.alph$data[names(tcr.seq.alph$data) %in% groups.to.plot]
# Merged onecell clones
beta.filter <- merge.onecell.clones(beta.filter)
alph.filter <- merge.onecell.clones(alph.filter)
# Extract all unique clonotypes from the specified groups for comprehensive plotting.
unique.cdr3.beta <- unique(unlist(lapply(beta.filter, function(df) df$CDR3.aa)))
unique.cdr3.alph <- unique(unlist(lapply(alph.filter, function(df) df$CDR3.aa)))
# Track clonotypes for plotting based on the previously defined set of unique clones.
tracking.trb <- trackClonotypes(beta.filter, .which = unique.cdr3.beta, .col = "aa")
tracking.tra <- trackClonotypes(alph.filter, .which = unique.cdr3.alph, .col = "aa")
# Set up colors for the plot with MergedClones in grey.
colors.trb <- hue_pal()(length(tracking.trb$CDR3.aa))
colors.trb[length(colors.trb)] <- "grey80"
colors.tra <- hue_pal()(length(tracking.tra$CDR3.aa))
colors.tra[length(colors.tra)] <- "grey80"
# Plotting using the vis() function.
vis(tracking.trb) + scale_fill_manual(values = colors.trb)
vis(tracking.tra) + scale_fill_manual(values = colors.tra)
# Manually assign colors for each unique CDR3aa sequence.
cdr3_colors <- c(
# For PS24FL8 beta chain.
"CASSEFGAAVYEQYF" = "#E68613",
"CASSLGGWTGYEQYF" = "#CD9600",
"CASSPIEGIVTEAFF" = "#0CB702",
"CASSPPTGSYEQYF" = "lightskyblue",
"CASSTGTGSAQETQYF" = "#A08CFF",
"CATSRGGGLTNTGELFF" = "#C77CFF",
"CSARDSVTGGGYSPLHF" = "#FF61CC",
# For PS24FL8 alpha chain.
"CAAKTSGTYKYIF" = "#F8766D",
"CAVDNFNKFYF" = "lightskyblue",
"CAVREAGGYQKVTF" = "#E68613",
"CAVRGSGTYKYIF" = "#A08CFF",
"CAVRRAGTYKYIF" = "#C77CFF",
"CVSYNTNAGKSTF" = "#FF61CC",
# For PS24EI8 beta chain.
"CASSAAVKGDTQYF" = "#F8766D",
"CASSEAATGRSTDTQYF" = "#E7851E",
"CASSELDGMRDTQYF" = "grey60",
"CASSETGGRGTEAFF" = "grey40",
"CASSFQGERTEAFF" = "#B2A100",
"CASSLEPPGYASDEQFF" = "grey",
"CASSLYPGGNEQYF" = "#0CB702",
"CASSPLPSLYGYTF" = "#7CAE00",
"CASSPPTGSYEQYF" = "#00BC51",
"CASSTGTSGRGEQFF" = "#28A3FF",
"CASSVVGDSRETQYF" = "#9C8DFF",
"CASTPQGARGDTEAFF" = "#D277FF",
"CSAREGGYEQYF" = "#F166E8",
"CSARLSYEQYF" = "#FF61C7",
"CSARQSYEQYF" = "grey50",
"CSARRDYEQYF" = "grey60",
# For PS24EI8 alpha chain.
"CAAPGGGGNKLTF" = "#F8766D",
"CAASMADKLIF" = "#9C8DFF",
"CAASNGYSTLTF" = "grey40",
"CAGPGGGGANNLFF" = "grey60",
"CAHGGGGSEKLVF" = "#B2A100",
"CAPGDGQKLLF" = "#7CAE00",
"CAPSDGQKLLF" = "#F166E8",
"CAPTRP_NQFYF" = "grey70",
"CAVDNFNKFYF" = "lightskyblue",
"CAVGYTDKLIF" = "#28A3FF",
"CAVRGGIW_SARQLTF" = "grey75",
"CAVSDHNDMRF" = "#E7851E",
"CAVSSGNTPLVF" = "#0CB702",
"CGTDSNTGNQFYF" = "#FF61C7",
"CVVEAGGTSYGKLTF" = "#D277FF",
# For PS03EARLY beta chain.
"CASSLAGDLQPQHF" = "#CD9600",
"CASSLSSSNQPQHF" = "#00BC51",
# For PS)#LATE alpha chain.
"CALIPKTGAGSYQLTF" = "indianred",
"CAMRAGGTSYGKLTF" = "#CD9600",
"CAMRSPPGNMLTF" = "#00BC51",
# For all conditions.
"MergedClones" = "grey80")
# Plot.
vis(tracking.trb) + scale_fill_manual(values = combined_colors)
vis(tracking.tra) + scale_fill_manual(values = combined_colors)
# Plot.
vis(tracking.trb) + scale_fill_manual(values = combined_colors)
# Plot.
vis(tracking.trb) + scale_fill_manual(values = cdr3_colors)
vis(tracking.tra) + scale_fill_manual(values = cdr3_colors)
groups.to.plot <- c("PS03EARLY" ,"PS03LATE")
# Filter data to retain only the groups of interest.
beta.filter <- tcr.seq.beta$data[names(tcr.seq.beta$data) %in% groups.to.plot]
alph.filter <- tcr.seq.alph$data[names(tcr.seq.alph$data) %in% groups.to.plot]
# Merged onecell clones
beta.filter <- merge.onecell.clones(beta.filter)
alph.filter <- merge.onecell.clones(alph.filter)
# Extract all unique clonotypes from the specified groups for comprehensive plotting.
unique.cdr3.beta <- unique(unlist(lapply(beta.filter, function(df) df$CDR3.aa)))
unique.cdr3.alph <- unique(unlist(lapply(alph.filter, function(df) df$CDR3.aa)))
# Track clonotypes for plotting based on the previously defined set of unique clones.
tracking.trb <- trackClonotypes(beta.filter, .which = unique.cdr3.beta, .col = "aa")
tracking.tra <- trackClonotypes(alph.filter, .which = unique.cdr3.alph, .col = "aa")
# Set up colors for the plot with MergedClones in grey.
colors.trb <- hue_pal()(length(tracking.trb$CDR3.aa))
colors.trb[length(colors.trb)] <- "grey80"
colors.tra <- hue_pal()(length(tracking.tra$CDR3.aa))
groups.to.plot <- c("PS03EARLY" ,"PS03LATE")
# Filter data to retain only the groups of interest.
beta.filter <- tcr.seq.beta$data[names(tcr.seq.beta$data) %in% groups.to.plot]
alph.filter <- tcr.seq.alph$data[names(tcr.seq.alph$data) %in% groups.to.plot]
# Merged onecell clones
beta.filter <- merge.onecell.clones(beta.filter)
alph.filter <- merge.onecell.clones(alph.filter)
# Extract all unique clonotypes from the specified groups for comprehensive plotting.
unique.cdr3.beta <- unique(unlist(lapply(beta.filter, function(df) df$CDR3.aa)))
unique.cdr3.alph <- unique(unlist(lapply(alph.filter, function(df) df$CDR3.aa)))
# Track clonotypes for plotting based on the previously defined set of unique clones.
tracking.trb <- trackClonotypes(beta.filter, .which = unique.cdr3.beta, .col = "aa")
tracking.tra <- trackClonotypes(alph.filter, .which = unique.cdr3.alph, .col = "aa")
# Plotting using the vis() function.
vis(tracking.trb) + scale_fill_manual(values = colors.trb)
# Manually assign colors for each unique CDR3aa sequence.
cdr3_colors <- c(
# For PS24FL8 beta chain.
"CASSEFGAAVYEQYF" = "#E68613",
"CASSLGGWTGYEQYF" = "#CD9600",
"CASSPIEGIVTEAFF" = "#0CB702",
"CASSPPTGSYEQYF" = "lightskyblue",
"CASSTGTGSAQETQYF" = "#A08CFF",
"CATSRGGGLTNTGELFF" = "#C77CFF",
"CSARDSVTGGGYSPLHF" = "#FF61CC",
# For PS24FL8 alpha chain.
"CAAKTSGTYKYIF" = "#F8766D",
"CAVDNFNKFYF" = "lightskyblue",
"CAVREAGGYQKVTF" = "#E68613",
"CAVRGSGTYKYIF" = "#A08CFF",
"CAVRRAGTYKYIF" = "#C77CFF",
"CVSYNTNAGKSTF" = "#FF61CC",
# For PS24EI8 beta chain.
"CASSAAVKGDTQYF" = "#F8766D",
"CASSEAATGRSTDTQYF" = "#E7851E",
"CASSELDGMRDTQYF" = "grey60",
"CASSETGGRGTEAFF" = "grey40",
"CASSFQGERTEAFF" = "#B2A100",
"CASSLEPPGYASDEQFF" = "grey",
"CASSLYPGGNEQYF" = "#0CB702",
"CASSPLPSLYGYTF" = "#7CAE00",
"CASSPPTGSYEQYF" = "#00BC51",
"CASSTGTSGRGEQFF" = "#28A3FF",
"CASSVVGDSRETQYF" = "#9C8DFF",
"CASTPQGARGDTEAFF" = "#D277FF",
"CSAREGGYEQYF" = "#F166E8",
"CSARLSYEQYF" = "#FF61C7",
"CSARQSYEQYF" = "grey50",
"CSARRDYEQYF" = "grey60",
# For PS24EI8 alpha chain.
"CAAPGGGGNKLTF" = "#F8766D",
"CAASMADKLIF" = "#9C8DFF",
"CAASNGYSTLTF" = "grey40",
"CAGPGGGGANNLFF" = "grey60",
"CAHGGGGSEKLVF" = "#B2A100",
"CAPGDGQKLLF" = "#7CAE00",
"CAPSDGQKLLF" = "#F166E8",
"CAPTRP_NQFYF" = "grey70",
"CAVDNFNKFYF" = "lightskyblue",
"CAVGYTDKLIF" = "#28A3FF",
"CAVRGGIW_SARQLTF" = "grey75",
"CAVSDHNDMRF" = "#E7851E",
"CAVSSGNTPLVF" = "#0CB702",
"CGTDSNTGNQFYF" = "#FF61C7",
"CVVEAGGTSYGKLTF" = "#D277FF",
# For PS03EARLY beta chain.
"CASSLAGDLQPQHF" = "#CD9600",
"CASSLSSSNQPQHF" = "#00BC51",
# For PS)#LATE alpha chain.
"CALIPKTGAGSYQLTF" = "indianred",
"CAMRAGGTSYGKLTF" = "#CD9600",
"CAMRSPPGNMLTF" = "#00BC51",
# For all conditions.
"MergedClones" = "grey80")
# Plotting using the vis() function.
vis(tracking.trb) + scale_fill_manual(values = colors.trb)
# Plotting using the vis() function.
vis(tracking.trb) + scale_fill_manual(values = cdr3_colors)
vis(tracking.tra) + scale_fill_manual(values = cdr3_colors)
# Select groups to plot.
groups.to.plot <- c("PS24FL8EARLY", "PS24FL8INT" ,"PS24FL8LATE")
# Filter data to retain only the groups of interest.
beta.filter <- tcr.seq.beta$data[names(tcr.seq.beta$data) %in% groups.to.plot]
alph.filter <- tcr.seq.alph$data[names(tcr.seq.alph$data) %in% groups.to.plot]
# Merged onecell clones
beta.filter <- merge.onecell.clones(beta.filter)
alph.filter <- merge.onecell.clones(alph.filter)
# Extract all unique clonotypes from the specified groups for comprehensive plotting.
unique.cdr3.beta <- unique(unlist(lapply(beta.filter, function(df) df$CDR3.aa)))
unique.cdr3.alph <- unique(unlist(lapply(alph.filter, function(df) df$CDR3.aa)))
# Track clonotypes for plotting based on the previously defined set of unique clones.
tracking.trb <- trackClonotypes(beta.filter, .which = unique.cdr3.beta, .col = "aa")
tracking.tra <- trackClonotypes(alph.filter, .which = unique.cdr3.alph, .col = "aa")
# Plotting using the vis() function.
vis(tracking.trb) + scale_fill_manual(values = cdr3_colors)
vis(tracking.tra) + scale_fill_manual(values = cdr3_colors)
# Plotting using the vis() function.
vis(tracking.trb) + scale_fill_manual(values = cdr3_colors)
groups.to.plot <- c("PS24EI8EARLY", "PS24EI8INT" ,"PS24EI8LATE")
# Filter data to retain only the groups of interest.
beta.filter <- tcr.seq.beta$data[names(tcr.seq.beta$data) %in% groups.to.plot]
alph.filter <- tcr.seq.alph$data[names(tcr.seq.alph$data) %in% groups.to.plot]
# Merged onecell clones
beta.filter <- merge.onecell.clones(beta.filter)
alph.filter <- merge.onecell.clones(alph.filter)
# Extract all unique clonotypes from the specified groups for comprehensive plotting.
unique.cdr3.beta <- unique(unlist(lapply(beta.filter, function(df) df$CDR3.aa)))
unique.cdr3.alph <- unique(unlist(lapply(alph.filter, function(df) df$CDR3.aa)))
# Track clonotypes for plotting based on the previously defined set of unique clones.
tracking.trb <- trackClonotypes(beta.filter, .which = unique.cdr3.beta, .col = "aa")
tracking.tra <- trackClonotypes(alph.filter, .which = unique.cdr3.alph, .col = "aa")
# Plotting using the vis() function.
vis(tracking.trb) + scale_fill_manual(values = cdr3_colors)
vis(tracking.tra) + scale_fill_manual(values = cdr3_colors)
