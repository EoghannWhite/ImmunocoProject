}
# Group by barcode and chain, then summarize by concatenating the relevant columns.
df.clones <- clones %>%
group_by(barcode, chain) %>%
summarize(
CDR3aa = concat_values(cdr3),
vgene = concat_values(v_gene),
jgene = concat_values(j_gene),
.groups = 'drop'
) %>%
pivot_wider(
names_from = chain,
values_from = c(CDR3aa, vgene, jgene),
names_glue = "{chain}_{.value}"
) %>%
rename(
TRB_CDR3aa = TRB_CDR3aa,
TRB_vgene = TRB_vgene,
TRB_jgene = TRB_jgene,
TRA_CDR3aa = TRA_CDR3aa,
TRA_vgene = TRA_vgene,
TRA_jgene = TRA_jgene
) %>%
replace(is.na(.), "")
# Reorder columns.
df.clones <- df.clones[,c("barcode", "TRB_CDR3aa", "TRB_vgene", "TRB_jgene", "TRA_CDR3aa", "TRA_vgene", "TRA_jgene")] %>% as.data.frame()
# Unite TRB_CDR3aa and TRA_CDR3aa into a single column "MergeCDR3".
df.clones <- df.clones %>%
unite(col = "MergeCDR3", c("TRB_CDR3aa", "TRA_CDR3aa"), remove = FALSE, sep = "__")
# Create a table of MergeCDR3 and order by frequency.
clone.order <- names(sort(table(df.clones$MergeCDR3), decreasing = TRUE))
# Create a named vector to map MergeCDR3 to CloneID.
clone.id.map <- setNames(paste0("Clonotype", seq_along(clone.order)), clone.order)
# Assign CloneID based on the mapping.
df.clones$CloneID <- clone.id.map[df.clones$MergeCDR3]
# Manually reordered the IDs of the three most frequent clones to reflect their correct ranking at TP6 .
df.clones <- df.clones %>%
mutate(CloneID = case_when(
CloneID == "Clonotype2" ~ "Clonotype1",
CloneID == "Clonotype3" ~ "Clonotype2",
CloneID == "Clonotype1" ~ "Clonotype3",
TRUE ~ CloneID # in case there are other values
))
# Create dummy data frame with Barcode and Clonotype_ID columns.
dummy <- data.frame(
Barcode = colnames(data.filt),
Clonotype_ID = NA_character_
)
# Join dummy with df.clones to get the CloneID for each Barcode.
dummy <- dummy %>%
left_join(df.clones %>% select(barcode, CloneID), by = c("Barcode" = "barcode")) %>%
mutate(Clonotype_ID = ifelse(is.na(CloneID), "Undetected", str_to_title(CloneID))) %>%
select(Barcode, Clonotype_ID)
# Add CloneID & CloneTP to the seurat object metadata.
data.filt$Clone.ID <- dummy$Clonotype_ID
data.filt$CloneTP <- paste(data.filt$TP, data.filt$Clone.ID, sep = "_")
SaveH5Seurat(data.filt, filename = "../data/processed/test.h5seurat")
test <- LoadH5Seurat(data.filt, filename = "../data/processed/test.h5seurat")
test <- LoadH5Seurat(filename = "../data/processed/test.h5seurat")
test <- LoadH5Seurat(file = "../data/processed/test.h5seurat")
data.filt
SaveH5SeuratObject <- function(
object,
filename,
verbose = TRUE,
overwrite = TRUE
) {
object[["RNA-tmp"]] <- CreateAssayObject(counts = object[["RNA"]]$counts)
object[["RNA"]] <- NULL
SaveH5Seurat(object, filename = filename, overwrite, verbose)
return(NULL)
}
LoadH5SeuratObject <- function(
filename,
verbose = TRUE
) {
object <- LoadH5Seurat(filename)
keys <- Key(object)
slotID <- names(keys)[startsWith(keys, "rna")]
object[["RNA"]] <- CreateAssay5Object(counts = object[[slotID]]$counts)
object[[slotID]] <- NULL
object@assays <- object@assays[sort(names(object@assays))]
return(object)
}
SaveH5Seurat(data.filt, filename = "../data/processed/test.h5seurat")
SaveH5Seurat(data.filt, filename = "../data/processed/test.h5seurat", overwrite = T)
SaveH5SeuratObject(data.filt, filename = "../data/processed/test.h5seurat", overwrite = T)
test <- LoadH5SeuratObject(file = "../data/processed/test.h5seurat")
SaveH5SeuratObject(data.filt, filename = "../data/processed/test.h5seurat", overwrite = T)
SaveH5SeuratObject <- function(
object,
filename,
verbose = TRUE,
overwrite = TRUE
) {
object[["RNA-tmp"]] <- CreateAssayObject(counts = object[["RNA"]]$counts)
object[["RNA"]] <- NULL
SaveH5Seurat(object, filename = filename, overwrite, verbose)
return(NULL)
}
LoadH5SeuratObject <- function(
filename,
verbose = TRUE
) {
object <- LoadH5Seurat(filename)
keys <- Key(object)
slotID <- names(keys)[startsWith(keys, "rna")]
object[["RNA"]] <- CreateAssay5Object(counts = object[[slotID]]$counts)
object[[slotID]] <- NULL
object@assays <- object@assays[sort(names(object@assays))]
return(object)
}
SaveH5SeuratObject(data.filt, filename = "../data/processed/test.h5seurat", overwrite = T)
SaveH5SeuratObject <- function(
object,
filename,
verbose = TRUE,
overwrite = TRUE
) {
object[["RNA-tmp"]] <- CreateAssayObject(counts = object[["RNA"]]$counts)
# object[["RNA"]] <- NULL
SaveH5Seurat(object, filename = filename, overwrite, verbose)
return(NULL)
}
SaveH5SeuratObject(data.filt, filename = "../data/processed/test.h5seurat", overwrite = T)
test <- LoadH5SeuratObject(file = "../data/processed/test.h5seurat")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
# Seurat and Seurat associated functions.
library(Seurat)
library(SeuratDisk)
library(SeuratWrappers)
# Tidyverse & data manipulation.
library(tidyverse)
library(ggrepel)
library(ggplot2)
library(gridExtra)
# TCR figures
library(immunarch)
# Chunk 3
source("NewscRNAseq_MyFunctions.R")
# Chunk 4
# Load the dataset.
raw.data <- Read10X("../data/raw/")
# Create gene expression matrix.
gene.matrix <- raw.data$`Gene Expression` %>% as.matrix()
# Chunk 5
# Load ab.capture.
ab.capture <- raw.data$`Antibody Capture` %>% as.matrix()
# Select cell barcodes detected in both gene.matrix and ab.capture.
joint.bcs <- intersect(colnames(gene.matrix), colnames(ab.capture))
# Subset gene.matrix and ab.capture by joint cell barcodes.
gene.matrix <- gene.matrix[, joint.bcs]
ab.capture <- as.matrix(ab.capture[, joint.bcs])
# Change ab.capture rownames based on the corresponding timepoints.
ab.capture <- ab.capture %>% as.data.frame()
rownames(ab.capture) <- paste0("TP", 1:6)
ab.capture <- ab.capture %>% as.matrix()
# Chunk 6
data <- CreateSeuratObject(counts = gene.matrix, min.cells = 3, min.features = 200)
# Chunk 7
data[["percent.mt"]] <- PercentageFeatureSet(data, pattern = "^MT-")
data <- subset(data, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 10)
# Chunk 8
data <- NormalizeData(data)
data <- FindVariableFeatures(data, selection.method = "vst", nfeatures = 2000)
data <- ScaleData(data, features = rownames(data))
# Chunk 9
# Remove cells found in ab.capture but not in data because of QC.
remove.cells <- setdiff(colnames(ab.capture), colnames(data))
`%notin%` <- Negate(`%in%`)
ab.capture <- ab.capture[,colnames(ab.capture) %notin% remove.cells]
# Add ab.capture data as a new assay independent from RNA.
data[["ab.capture"]] <- CreateAssayObject(counts = ab.capture)
# Normalize HTO data, here we use centered log-ratio (CLR) transformation.
data <- NormalizeData(data, assay = "ab.capture", normalization.method = "CLR")
# Demultiplex cells.
data <- HTODemux(data, assay = "ab.capture", positive.quantile = 0.99)
# Chunk 10
# Global classification results.
table(data$ab.capture_classification.global)
# Ridge plot for each time-points.
Idents(data) <- "ab.capture_maxID"
RidgePlot(data, assay = "ab.capture", features = rownames(data[["ab.capture"]])[1:6], ncol = 3) &
theme(axis.title.y = element_blank())
# FeatureScatter plot bewteen chosen time-points.
FeatureScatter(data, feature1 = "abcapture_TP1", feature2 = "abcapture_TP4")
FeatureScatter(data, feature1 = "abcapture_TP1", feature2 = "abcapture_TP6")
# Chunk 11
data.filt <- subset(data, subset = ab.capture_classification.global == "Singlet")
data.filt$TP <- data.filt$ab.capture_classification %>% factor(levels = c("TP1", "TP2", "TP3", "TP4", "TP5", "TP6"))
# Chunk 12
# Run PCA.
data.filt <- RunPCA(data.filt, features = VariableFeatures(object = data.filt))
# Find the elbow point.
ElbowPlot(data.filt)
# Cluster the cells.
data.filt <- FindNeighbors(data.filt, dims = 1:10)
data.filt <- FindClusters(data.filt, resolution = 0.5)
# Run non-linear dimensional reduction.
data.filt <- RunUMAP(data.filt, dims = 1:10)
# Plot UMAP.
DimPlot(data.filt)
# Chunk 13
# Import & format clonotype data for all cells (regardless of cells discarded by QC).
clones <- read.csv(file = "../data/processed/filtered_contig_annotations.csv")
# Keep only columns of interest.
col.to.keep <- c("barcode", "chain", "cdr3", "v_gene", "j_gene", "raw_clonotype_id")
clones <- clones[,names(clones) %in% col.to.keep]
# Create a function to concatenate values.
concat_values <- function(x) {
paste(unique(x), collapse = ";")
}
# Group by barcode and chain, then summarize by concatenating the relevant columns.
df.clones <- clones %>%
group_by(barcode, chain) %>%
summarize(
CDR3aa = concat_values(cdr3),
vgene = concat_values(v_gene),
jgene = concat_values(j_gene),
.groups = 'drop'
) %>%
pivot_wider(
names_from = chain,
values_from = c(CDR3aa, vgene, jgene),
names_glue = "{chain}_{.value}"
) %>%
rename(
TRB_CDR3aa = TRB_CDR3aa,
TRB_vgene = TRB_vgene,
TRB_jgene = TRB_jgene,
TRA_CDR3aa = TRA_CDR3aa,
TRA_vgene = TRA_vgene,
TRA_jgene = TRA_jgene
) %>%
replace(is.na(.), "")
# Reorder columns.
df.clones <- df.clones[,c("barcode", "TRB_CDR3aa", "TRB_vgene", "TRB_jgene", "TRA_CDR3aa", "TRA_vgene", "TRA_jgene")] %>% as.data.frame()
# Unite TRB_CDR3aa and TRA_CDR3aa into a single column "MergeCDR3".
df.clones <- df.clones %>%
unite(col = "MergeCDR3", c("TRB_CDR3aa", "TRA_CDR3aa"), remove = FALSE, sep = "__")
# Create a table of MergeCDR3 and order by frequency.
clone.order <- names(sort(table(df.clones$MergeCDR3), decreasing = TRUE))
# Create a named vector to map MergeCDR3 to CloneID.
clone.id.map <- setNames(paste0("Clonotype", seq_along(clone.order)), clone.order)
# Assign CloneID based on the mapping.
df.clones$CloneID <- clone.id.map[df.clones$MergeCDR3]
# Manually reordered the IDs of the three most frequent clones to reflect their correct ranking at TP6 .
df.clones <- df.clones %>%
mutate(CloneID = case_when(
CloneID == "Clonotype2" ~ "Clonotype1",
CloneID == "Clonotype3" ~ "Clonotype2",
CloneID == "Clonotype1" ~ "Clonotype3",
TRUE ~ CloneID # in case there are other values
))
# Create dummy data frame with Barcode and Clonotype_ID columns.
dummy <- data.frame(
Barcode = colnames(data.filt),
Clonotype_ID = NA_character_
)
# Join dummy with df.clones to get the CloneID for each Barcode.
dummy <- dummy %>%
left_join(df.clones %>% select(barcode, CloneID), by = c("Barcode" = "barcode")) %>%
mutate(Clonotype_ID = ifelse(is.na(CloneID), "Undetected", str_to_title(CloneID))) %>%
select(Barcode, Clonotype_ID)
# Add CloneID & CloneTP to the seurat object metadata.
data.filt$Clone.ID <- dummy$Clonotype_ID
data.filt$CloneTP <- paste(data.filt$TP, data.filt$Clone.ID, sep = "_")
data.filt
SaveH5Seurat(object = data.filt, filename = "../data/processed/test.h5seurat")
SaveH5Seurat(object = data.filt, filename = "../data/processed/test.h5seurat")
LoadH5Seurat(file = "../data/processed/test.h5seurat")
data.filt
DefaultAssay(object = data.filt) <- "ab.capture"
data.filt
SaveH5Seurat(object = data.filt, filename = "../data/processed/test.h5seurat", overwrite = T)
LoadH5Seurat(file = "../data/processed/test.h5seurat")
data.filt
DefaultAssay(object = data.filt) <- "RNA"
SaveH5Seurat(object = data.filt, filename = "../data/processed/test.h5seurat", overwrite = T)
LoadH5Seurat(file = "../data/processed/test.h5seurat")
# Check if RNA assay has 'counts' and 'data' slots
if (!"counts" %in% slotNames(data.filt[["RNA"]])) {
data.filt[["RNA"]]@counts <- data.filt[["RNA"]]@data
}
if (!"data" %in% slotNames(data.filt[["RNA"]])) {
data.filt[["RNA"]]@data <- data.filt[["RNA"]]@counts
}
data.filt@assays$RNA@layers$counts
data.filt@assays$RNA@counts
test <- data.filt
test@assays$RNA@layers$counts
test@assays$RNA@counts <- test@assays$RNA@layers$counts
test[["RNA"]]$counts
test[["RNA-tmp"]] <- CreateAssayObject(counts = test[["RNA"]]$counts)
test[["RNA"]] <- NULL
test@assays$RNA@counts <- test@assays$RNA@layers$counts
test
DefaultAssay(object = data.filt) <- "RNA-tmp"
test <- data.filt
test[["RNA-tmp"]] <- CreateAssay5Object(counts = test[["RNA"]]$counts)
DefaultAssay(object = data.filt) <- "RNA-tmp"
test[["RNA"]] <- NULL
test <- data.filt
test[["RNA-tmp"]] <- CreateAssayObject(counts = test[["RNA"]]$counts)
DefaultAssay(object = test) <- "RNA-tmp"
test
test <- data.filt
test[["RNAtmp"]] <- CreateAssayObject(counts = test[["RNA"]]$counts)
test
DefaultAssay(object = test) <- "RNAtmp"
test[["RNA"]] <- NULL
test
test@assays$RNA@counts
test@assays$RNA@layers$counts
SaveH5Seurat(object = test, filename = "../data/processed/test.h5seurat", overwrite = T)
LoadH5Seurat(file = "../data/processed/test.h5seurat")
test.load <- LoadH5Seurat(file = "../data/processed/test.h5seurat")
test.load
# Compare
data.filt
DimPlot(data.filt)
DimPlot(test.load)
test <- data.filt
# Create counts data slots for RNA
test[["RNAtmp"]] <- CreateAssayObject(counts = test[["RNA"]]$counts)
DefaultAssay(object = test) <- "RNAtmp"
test[["RNA"]] <- NULL
# Create counts data slots for RNA
test[["RNAtmp"]] <- CreateAssayObject(counts = test[["RNA"]]$counts)
DefaultAssay(object = test) <- "RNAtmp"
test[["RNA"]] <- NULL
test[["RNA"]]<- test[["RNAtmp"]]
test
test <- data.filt
test[["RNAtmp"]] <- CreateAssayObject(counts = test[["RNA"]]$counts)
DefaultAssay(object = test) <- "RNAtmp"
test[["RNA"]] <- NULL
test[["RNA"]]<- test[["RNAtmp"]]
DefaultAssay(object = test) <- "RNA"
test[["RNAtmp"]] <- NULL
test
test@assays$RNA@counts
data.filt@assays$RNA@layers$counts
test[["ab.capture"]]$counts
# Create counts data slots for ab.capture
test[["abtmp"]] <- CreateAssayObject(counts = test[["ab.capture"]]$counts)
test <- data.filt
test[["RNAtmp"]] <- CreateAssayObject(counts = test[["RNA"]]$counts)
DefaultAssay(object = test) <- "RNAtmp"
test[["RNA"]] <- NULL
test[["RNA"]]<- test[["RNAtmp"]]
DefaultAssay(object = test) <- "RNA"
test[["RNAtmp"]] <- NULL
# Create counts data slots for ab.capture
test[["abtmp"]] <- CreateAssayObject(counts = test[["ab.capture"]]$counts)
test[["ab.capture"]] <- NULL
test[["ab.capture"]] <- test[["abtmp"]]
test[["abtmp"]] <- NULL
test
# Save as seurat and reload.
SaveH5Seurat(object = test, filename = "../data/processed/test.h5seurat", overwrite = T)
test.load <- LoadH5Seurat(file = "../data/processed/test.h5seurat")
test.load
DimPlot(data.filt)
DimPlot(test.load)
data.filt
test.load
VlnPlot(data.filt, features = "TCF7")
VlnPlot(test.load, features = "TCF7")
VlnPlot(data.filt, features = "TCF7")
VlnPlot(test.load, features = "TCF7")
data.filt@assays$RNA@layers$scale.data
test@assays$RNA@layers$counts
test@assays$RNA@scale.data
test@assays$RNA@scale.data
data.filt@assays$RNA@
data.filt@assays$RNA@
test@assays$RNA@layers$counts
View(data.filt)
data.filt
test.load
options(Seurat.object.assay.version = "v4")
SaveH5Seurat(object = data.filt, filename = "../data/processed/test.h5seurat", overwrite = T)
test.load <- LoadH5Seurat(file = "../data/processed/test.h5seurat")
options(Seurat.object.assay.version = "v3")
options(Seurat.object.assay.version = "v6")
Seurat.object.assay.version
test <- data.filt
test <- options(Seurat.object.assay.version = "v5")
test <- options(Seurat.object.assay.version = "v4")
SaveH5Seurat(object = test, filename = "../data/processed/test.h5seurat", overwrite = T)
test
test <- options(Seurat.object.assay.version = "v4")
test
data.filt
test <- data.filt
###### WORKAROUND ######
# assigning the previous version of the `[[` function for the Assay class to the SeuratDisk package environment
"[[.Assay" <- function(x, i, ..., drop = FALSE) {
if (missing(x = i)) {
i <- colnames(x = slot(object = x, name = 'meta.features'))
}
data.return <- slot(object = x, name = 'meta.features')[, i, drop = FALSE, ...]
if (drop) {
data.return <- unlist(x = data.return, use.names = FALSE)
names(x = data.return) <- rep.int(x = rownames(x = x), times = length(x = i))
}
return(data.return)
}
test <- data.filt
###### WORKAROUND ######
# assigning the previous version of the `[[` function for the Assay class to the SeuratDisk package environment
"[[.Assay" <- function(x, i, ..., drop = FALSE) {
if (missing(x = i)) {
i <- colnames(x = slot(object = x, name = 'meta.features'))
}
data.return <- slot(object = x, name = 'meta.features')[, i, drop = FALSE, ...]
if (drop) {
data.return <- unlist(x = data.return, use.names = FALSE)
names(x = data.return) <- rep.int(x = rownames(x = x), times = length(x = i))
}
return(data.return)
}
environment(`[[.Assay`) <- asNamespace("test")
environment(`[[.Assay`) <- asNamespace("SeuratObject")
rlang::env_unlock(asNamespace("SeuratDisk"))
assign("[[.Assay", `[[.Assay`, asNamespace("SeuratDisk"))
lockEnvironment(asNamespace("SeuratDisk"), bindings = TRUE)
rm(`[[.Assay`)
# work
SaveH5Seurat(test, "test.h5Seurat", overwrite = T)
test.load <- LoadH5Seurat(file = "../data/processed/test.h5seurat")
# Define the parts
parts <- list.files("../data/raw/", pattern = "matrix.part-*", full.names = TRUE)
# Reassemble the file
output_file <- "../data/raw/matrix.mtx.gz"
file.remove(output_file)
for (part in parts) {
file.append(output_file, part)
}
for (part in parts) {
file.append(output_file, part)
}
# Load the dataset.
raw.data <- Read10X("../data/raw/")
# Seurat and Seurat associated functions.
library(Seurat)
library(SeuratDisk)
library(SeuratWrappers)
# Tidyverse & data manipulation.
library(tidyverse)
library(ggrepel)
library(ggplot2)
library(gridExtra)
# TCR figures
library(immunarch)
# Load the dataset.
raw.data <- Read10X("../data/raw/")
raw.data
# Create gene expression matrix.
gene.matrix <- raw.data$`Gene Expression` %>% as.matrix()
# Load ab.capture.
ab.capture <- raw.data$`Antibody Capture` %>% as.matrix()
# Select cell barcodes detected in both gene.matrix and ab.capture.
joint.bcs <- intersect(colnames(gene.matrix), colnames(ab.capture))
# Subset gene.matrix and ab.capture by joint cell barcodes.
gene.matrix <- gene.matrix[, joint.bcs]
ab.capture <- as.matrix(ab.capture[, joint.bcs])
# Change ab.capture rownames based on the corresponding timepoints.
ab.capture <- ab.capture %>% as.data.frame()
rownames(ab.capture) <- paste0("TP", 1:6)
ab.capture <- ab.capture %>% as.matrix()
data <- CreateSeuratObject(counts = gene.matrix, min.cells = 3, min.features = 200)
data[["percent.mt"]] <- PercentageFeatureSet(data, pattern = "^MT-")
data <- subset(data, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 10)
data <- NormalizeData(data)
data <- FindVariableFeatures(data, selection.method = "vst", nfeatures = 2000)
data <- ScaleData(data, features = rownames(data))
# Remove cells found in ab.capture but not in data because of QC.
remove.cells <- setdiff(colnames(ab.capture), colnames(data))
`%notin%` <- Negate(`%in%`)
ab.capture <- ab.capture[,colnames(ab.capture) %notin% remove.cells]
# Add ab.capture data as a new assay independent from RNA.
data[["ab.capture"]] <- CreateAssayObject(counts = ab.capture)
# Normalize HTO data, here we use centered log-ratio (CLR) transformation.
data <- NormalizeData(data, assay = "ab.capture", normalization.method = "CLR")
# Demultiplex cells.
data <- HTODemux(data, assay = "ab.capture", positive.quantile = 0.99)
# Global classification results.
table(data$ab.capture_classification.global)
# Ridge plot for each time-points.
Idents(data) <- "ab.capture_maxID"
RidgePlot(data, assay = "ab.capture", features = rownames(data[["ab.capture"]])[1:6], ncol = 3) &
theme(axis.title.y = element_blank())
# FeatureScatter plot bewteen chosen time-points.
FeatureScatter(data, feature1 = "abcapture_TP1", feature2 = "abcapture_TP4")
FeatureScatter(data, feature1 = "abcapture_TP1", feature2 = "abcapture_TP6")
data.filt <- subset(data, subset = ab.capture_classification.global == "Singlet")
data.filt$TP <- data.filt$ab.capture_classification %>% factor(levels = c("TP1", "TP2", "TP3", "TP4", "TP5", "TP6"))
# Run PCA.
data.filt <- RunPCA(data.filt, features = VariableFeatures(object = data.filt))
# Find the elbow point.
ElbowPlot(data.filt)
# Cluster the cells.
data.filt <- FindNeighbors(data.filt, dims = 1:10)
data.filt <- FindClusters(data.filt, resolution = 0.5)
# Run non-linear dimensional reduction.
data.filt <- RunUMAP(data.filt, dims = 1:10)
# Plot UMAP.
DimPlot(data.filt)
